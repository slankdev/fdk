FDK_PATH=/etc/fdk-local.bash
FDK_FRR_PATH=~/frr.frrouting
FDK_FRR_PATH=~/frr.slankdev
FDK_TOPOTEST_TARGET=bgp_multi_vrf_topo2/test_bgp_multi_vrf_topo2.py
FDK_TOPOTEST_TARGET=bgp_multi_vrf_topo1/test_bgp_multi_vrf_topo1.py
FDK_TOPOTEST_TARGET=bgp_l3vpn_to_bgp_vrf/test_bgp_l3vpn_to_bgp_vrf.py
FDK_TOPOTEST_TARGET=srv6_locator/test_srv6_locator.py
FDK_TOPOTEST_TARGET=zebra_seg6local_route/test_zebra_seg6local_route.py
FDK_TOPOTEST_TARGET=zebra_seg6_route/test_zebra_seg6_route.py
FDK_TOPOTEST_TARGET=bgp_instance_del_test/test_bgp_instance_del_test.py
FDK_TOPOTEST_TARGET=bgp_instance_del_test/test_bgp_instance_del_test.py
FDK_TOPOTEST_TARGET=bgp_srv6l3vpn_to_bgp_vrf/test_bgp_srv6l3vpn_to_bgp_vrf.py
FDK_TOPOTEST_TARGETS="\
  bgp_multi_vrf_topo1/test_bgp_multi_vrf_topo1.py
  bgp-vrf-route-leak-basic/test_bgp-vrf-route-leak-basic.py
  bgp_instance_del_test/test_bgp_instance_del_test.py
  bgp_prefix_sid2/test_bgp_prefix_sid2.py
  bgp_srv6l3vpn_to_bgp_vrf/test_bgp_srv6l3vpn_to_bgp_vrf.py
  "
FDK_TOPOTEST_TARGETS="\
  zebra_seg6_route/test_zebra_seg6_route.py
  zebra_seg6local_route/test_zebra_seg6local_route.py
  srv6_locator/test_srv6_locator.py
  bgp_prefix_sid2/test_bgp_prefix_sid2.py
  bgp_srv6l3vpn_to_bgp_vrf/test_bgp_srv6l3vpn_to_bgp_vrf.py
  "

alias cdf="cd $FDK_FRR_PATH"
alias cdt="cd $FDK_FRR_PATH/tests/topotests/"
alias vifdk='vim $FDK_PATH && source $FDK_PATH'

alias fdk-push='cd ~/git/fdk && git add . && git commit -m update && git push'
alias vifdk-test-target="vim $FDK_FRR_PATH/tests/topotests/$FDK_TOPOTEST_TARGET"

function fdk-configure() {
  pushd $FDK_FRR_PATH
  make clean
  ./bootstrap.sh
  ./configure \
    --prefix=/usr \
    --includedir=\${prefix}/include \
    --enable-exampledir=\${prefix}/share/doc/frr/examples \
    --bindir=\${prefix}/bin \
    --sbindir=\${prefix}/lib/frr \
    --libdir=\${prefix}/lib/frr \
    --libexecdir=\${prefix}/lib/frr \
    --localstatedir=/var/run/frr \
    --sysconfdir=/etc/frr \
    --with-moduledir=\${prefix}/lib/frr/modules \
    --with-libyang-pluginsdir=\${prefix}/lib/frr/libyang_plugins \
    --enable-configfile-mask=0640 \
    --enable-logfile-mask=0640 \
    --enable-snmp=agentx \
    --enable-multipath=64 \
    --enable-user=frr \
    --enable-group=frr \
    --enable-grpc \
    --disable-isisd \
    --disable-ospfd \
    --disable-ospf6d \
    --disable-pathd \
    --disable-pathd \
    --enable-vty-group=frrvty \
    --with-pkg-git-version \
    --with-pkg-extra-version=-MyOwnFRRVersion \
    --enable-sharpd \
    --enable-doc-html \
    #end
  popd
}

function fdk-build() {
  pushd $FDK_FRR_PATH
  make -j $(nproc) && make -j $(nproc) install
  popd
}

function fdk-test-list() {
  for file in $FDK_TOPOTEST_TARGETS; do
    echo $file;
  done
}

function fdk-test-all() {
  for file in $FDK_TOPOTEST_TARGETS; do
    pytest -s -v --log-level=DEBUG $FDK_FRR_PATH/tests/topotests/$file;
    if [ "$?" != "0" ]; then
      echo "error"
      return
    fi
  done
}

function fdk-test() {
  pytest -s -vv --log-level=DEBUG $FDK_FRR_PATH/tests/topotests/$FDK_TOPOTEST_TARGET;
}

function fdk-test-topology-only() {
  pytest -s -v --log-level=DEBUG --topology-only $FDK_FRR_PATH/tests/topotests/$FDK_TOPOTEST_TARGET;
}

function fdk-list() {
  ls -l /tmp/topotests | grep '^d' | awk '{print $9}'
}

function fdk-get-context() {
	mkdir -p /var/run/fdk
	if [ -e /var/run/fdk/context ]; then
		cat /var/run/fdk/context
	else
		echo "<nil>"
	fi
}

function fdk-set-context() {
  if [ $# -lt 1 ]; then
    echo "invalid command syntax" 1>&2
    echo "Usage: $0 <test-context-path>" 1>&2
    return 1
	fi

	mkdir -p /var/run/fdk
	echo $1 > /var/run/fdk/context
}

function fdk-clear-context() {
	if [ -e /var/run/fdk/context ]; then
		rm -f /var/run/fdk/context
	fi
}

function fdk-enter-global() {
  if [ $# -lt 1 ]; then
    echo "invalid command syntax" 1>&2
    echo "Usage: $0 <node-pid-file>" 1>&2
    return 1
  fi

  PID=$(cat $1)
  if [ $# -eq 1 ]; then
    nsenter -t $PID -a bash --norc
  else
    nsenter -t $PID -a "${@:2:($#-1)}"
  fi
}

function fdk-enter-ctx() {
  if [ $# -lt 1 ]; then
    echo "invalid command syntax" 1>&2
    echo "Usage: $0 <node-name>" 1>&2
    return 1
  fi

	PID=$(cat /tmp/topotests/$(cat /var/run/fdk/context)/$1)
  if [ $# -eq 1 ]; then
    nsenter -t $PID -a bash --norc
  else
    nsenter -t $PID -a "${@:2:($#-1)}"
  fi
}

function _fdk-enter-global() {
  local args
  case $COMP_CWORD in
  1) args=$(ls /tmp/topotests/*/*.pid) ;;
  esac
  COMPREPLY=( `compgen -W "$args" -- ${COMP_WORDS[COMP_CWORD]}` )
}

function _fdk-enter-ctx() {
	CTX=$(cat /var/run/fdk/context)
  local args
  case $COMP_CWORD in
  1) args=$(cd /tmp/topotests/$CTX && ls -1 *.pid) ;;
  esac
  COMPREPLY=( `compgen -W "$args" -- ${COMP_WORDS[COMP_CWORD]}` )
}

function _fdk-set-context() {
  local args
  case $COMP_CWORD in
  1) args=$(ls -l /tmp/topotests | grep '^d' | awk '{print $9}') ;;
  esac
  COMPREPLY=( `compgen -W "$args" -- ${COMP_WORDS[COMP_CWORD]}` )
}

complete -F _fdk-enter-global fdk-enter-global
complete -F _fdk-enter-ctx fdk-enter-ctx
complete -F _fdk-set-context fdk-set-context
